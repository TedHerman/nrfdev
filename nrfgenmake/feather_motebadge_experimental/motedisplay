#!/usr/bin/env python3

import serial, sys, os, subprocess
import time, datetime

def findevice():
  alldev = os.listdir("/dev")
  usbdev = [ n for n in alldev if n.startswith("tty.usb") or n.startswith("ttyUSB") or n.startswith("ttyACM") ]
  if len(usbdev) < 1: 
     sys.stderr.write("cannot find usb mote device\n")
     sys.exit(1)
  if len(usbdev) > 1: 
     sys.stderr.write("found too many usb mote devices\n")
     sys.exit(1)
  return "/dev/{0}".format(usbdev[0])

S = serial.Serial(baudrate=115200,port=findevice(),timeout=1.0) 

F = open("badges.txt",'a')

def getpacket():
  # initially scan for start of frame:
  while True:
    b = S.read(1)
    if len(b) < 1: return None
    if b == b"\x7E": break
  # we have just read a 0x7E
  packet = list()
  b = S.read(1) # check for special case
  if len(b) < 1: return None
  if b == b"\x7E": # empty frame means we got fooled
     b = S.read(1) # now *this* should be the real start
     if len(b) < 1: return None
  # b is the first character of the frame  
  # now after start of frame, scan for end of frame
  while True:
    if b ==  b"\x7D":  # special character check
       b = S.read(1)
       if len(b) < 1: return None
       if b not in (b"\x5E",b"\x5D"): return None
       if b == b"\x5E": b = "\x7E"
       elif b == b"\x5D": b = "\x7D"
    elif b == b"\x7E":
       if len(packet) == 0: return None
       return packet
    else:
       packet.append(ord(b))
       b = S.read(1)
       if len(b) < 1: return None
    continue

def showpacket(p):
  if len(p) != 48: return
  p = p[14:] # skip over motepacket header
  time = p[3]*256*256*256 + p[2]*256*256 + p[1]*256 + p[0]
  moteid = p[4]
  if time > 1550000000:
     time = datetime.datetime.fromtimestamp(time)
  result = "Mote {0} at time {1}".format(moteid,time)
  numrep = p[5]
  replist = p[6:]
  for i in range(numrep):
     oid,rssi,replist = replist[0],replist[1],replist[2:]
     result += " saw {0} with rssi {1}".format(oid,rssi)
  result += " base rssi {0}".format(p[-5]) # skip backwards 
  F.write(result)
  F.write('\n')
  F.flush()
  sys.stdout.write("\r"+result)

def maincycle():
  oldtime = int(time.mktime(time.gmtime()))
  while True:
    T = getpacket()
    if T == None: continue
    showpacket(T)
    newtime = int(time.mktime(time.gmtime()))
    elapsed = newtime - oldtime
    if elapsed > 10:  # over 10 seconds
      oldtime = newtime 
      B = bytearray(8)
      B[4] = (oldtime >> 24)&0xff
      B[5] = (oldtime >> 16)&0xff
      B[6] = (oldtime >>  8)&0xff
      B[7] = oldtime &0xff  
      S.write(bytes(B))
      return

def experiment(duration):
  start = time.time()
  for i in range(10000):
    maincycle()
    if time.time() - start > duration: break 
  F.write("---------------------------------\n")

def run():
  while True:
    sys.stdout.write("\ntype quit or enter a comment for next experiment (1 minute)\n")
    comment = ""
    while True:
      nextchar = sys.stdin.read(1)
      if len(nextchar) == 0: continue
      comment = comment + nextchar
      if nextchar == '\n': break
    if comment.startswith("quit"): 
      F.close()
      return
    F.write(comment+"\n")
    sys.stdout.write("start experiment ...\n")
    experiment(60)

run()

